#!/bin/bash
# migrate-service-to-core.sh
# 
# Helper script to migrate an existing service to use the standardized core framework

# Define colors for better readability
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Display header
echo -e "${BLUE}=== Lightning Lens Service Migration Tool ===${NC}"
echo "This tool helps migrate existing services to use the standardized core framework."
echo ""

# Check arguments
if [ $# -lt 1 ]; then
    echo -e "${YELLOW}Usage: $0 <service_file_path>${NC}"
    echo "Example: $0 Lightning-Lens/lightning_lens/scripts/cors_proxy.js"
    exit 1
fi

SERVICE_FILE="$1"
CORE_DIR="Lightning-Lens/lightning_lens/core"
BACKUP_DIR="Lightning-Lens/lightning_lens/backups"

# Check if the service file exists
if [ ! -f "$SERVICE_FILE" ]; then
    echo -e "${RED}Error: Service file '$SERVICE_FILE' not found${NC}"
    exit 1
fi

# Check if core modules exist
if [ ! -d "$CORE_DIR" ]; then
    echo -e "${RED}Error: Core directory '$CORE_DIR' not found${NC}"
    exit 1
fi

# Create backup directory if it doesn't exist
mkdir -p "$BACKUP_DIR"

# Get service name from file path
SERVICE_NAME=$(basename "$SERVICE_FILE" | sed 's/\.[^.]*$//')

# Create a backup of the original file
TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
BACKUP_FILE="$BACKUP_DIR/${SERVICE_NAME}_${TIMESTAMP}.js"
cp "$SERVICE_FILE" "$BACKUP_FILE"

echo -e "${GREEN}âœ“ Created backup at $BACKUP_FILE${NC}"

# Determine file extension
EXTENSION="${SERVICE_FILE##*.}"

# Guide the user through the migration process
echo ""
echo -e "${BLUE}=== Migration Steps for $SERVICE_NAME ===${NC}"
echo "Please follow these steps to migrate your service:"
echo ""

echo -e "1. ${YELLOW}Add core module imports${NC}"
if [ "$EXTENSION" == "js" ]; then
    echo "   Example:"
    echo "   ```javascript"
    echo "   const config = require('../core/config');"
    echo "   const { createLogger } = require('../core/logger');"
    echo "   const registry = require('../core/service-registry');"
    echo "   const { createErrorHandler } = require('../core/error-handler');"
    echo "   const { WebSocketClient, WebSocketServer } = require('../core/websocket-manager');"
    echo "   ```"
elif [ "$EXTENSION" == "py" ]; then
    echo "   Example:"
    echo "   ```python"
    echo "   import sys"
    echo "   import os"
    echo "   sys.path.append(os.path.join(os.path.dirname(__file__), '..'))"
    echo "   from core import config, logger, service_registry, error_handler"
    echo "   ```"
fi

echo ""
echo -e "2. ${YELLOW}Create a standardized logger${NC}"
if [ "$EXTENSION" == "js" ]; then
    echo "   ```javascript"
    echo "   const logger = createLogger({ serviceName: '$SERVICE_NAME' });"
    echo "   ```"
elif [ "$EXTENSION" == "py" ]; then
    echo "   ```python"
    echo "   logger = logger.create_logger(service_name='$SERVICE_NAME')"
    echo "   ```"
fi

echo ""
echo -e "3. ${YELLOW}Register the service with the registry${NC}"
if [ "$EXTENSION" == "js" ]; then
    echo "   ```javascript"
    echo "   const service = registry.registerService({"
    echo "     name: '$SERVICE_NAME',"
    echo "     type: registry.SERVICE_TYPES.HTTP, // or WS, or OTHER"
    echo "     port: port,"
    echo "     description: 'Description of the service',"
    echo "     status: registry.SERVICE_STATES.STARTING,"
    echo "   });"
    echo "   ```"
elif [ "$EXTENSION" == "py" ]; then
    echo "   ```python"
    echo "   service = service_registry.register_service("
    echo "     name='$SERVICE_NAME',"
    echo "     service_type=service_registry.SERVICE_TYPES.HTTP, # or WS, or OTHER"
    echo "     port=port,"
    echo "     description='Description of the service',"
    echo "     status=service_registry.SERVICE_STATES.STARTING,"
    echo "   )"
    echo "   ```"
fi

echo ""
echo -e "4. ${YELLOW}Use the error handler for Express applications${NC}"
if [ "$EXTENSION" == "js" ]; then
    echo "   ```javascript"
    echo "   // Add at the end of your Express routes"
    echo "   app.use(createErrorHandler({ logger }));"
    echo "   ```"
fi

echo ""
echo -e "5. ${YELLOW}Use the WebSocket client or server${NC}"
if [ "$EXTENSION" == "js" ]; then
    echo "   For client:"
    echo "   ```javascript"
    echo "   const ws = new WebSocketClient({"
    echo "     url: 'ws://localhost:8000',"
    echo "     name: '$SERVICE_NAME-client',"
    echo "     autoReconnect: true,"
    echo "   });"
    echo "   ```"
    echo ""
    echo "   For server:"
    echo "   ```javascript"
    echo "   const wss = new WebSocketServer({"
    echo "     server, // HTTP server"
    echo "     path: '/ws',"
    echo "     name: '$SERVICE_NAME-ws',"
    echo "   });"
    echo "   ```"
elif [ "$EXTENSION" == "py" ]; then
    echo "   Work in progress - Python WebSocket integration"
fi

echo ""
echo -e "6. ${YELLOW}Update the service status when running${NC}"
if [ "$EXTENSION" == "js" ]; then
    echo "   ```javascript"
    echo "   // After the server is started"
    echo "   registry.updateService(service.id, {"
    echo "     status: registry.SERVICE_STATES.RUNNING,"
    echo "   });"
    echo "   ```"
elif [ "$EXTENSION" == "py" ]; then
    echo "   ```python"
    echo "   # After the server is started"
    echo "   service_registry.update_service(service['id'], {"
    echo "     'status': service_registry.SERVICE_STATES.RUNNING,"
    echo "   })"
    echo "   ```"
fi

echo ""
echo -e "7. ${YELLOW}Update the service status when stopping${NC}"
if [ "$EXTENSION" == "js" ]; then
    echo "   ```javascript"
    echo "   // When shutting down"
    echo "   registry.updateService(service.id, {"
    echo "     status: registry.SERVICE_STATES.STOPPING,"
    echo "   });"
    echo "   "
    echo "   // After fully stopped"
    echo "   registry.deregisterService(service.id);"
    echo "   ```"
elif [ "$EXTENSION" == "py" ]; then
    echo "   ```python"
    echo "   # When shutting down"
    echo "   service_registry.update_service(service['id'], {"
    echo "     'status': service_registry.SERVICE_STATES.STOPPING,"
    echo "   })"
    echo "   "
    echo "   # After fully stopped"
    echo "   service_registry.deregister_service(service['id'])"
    echo "   ```"
fi

echo ""
echo -e "${BLUE}=== Sample Migration Template ===${NC}"
if [ "$EXTENSION" == "js" ]; then
    echo "```javascript"
    echo "/**"
    echo " * $SERVICE_NAME - Migrated to use standardized core framework"
    echo " */"
    echo ""
    echo "// Core framework imports"
    echo "const config = require('../core/config');"
    echo "const { createLogger } = require('../core/logger');"
    echo "const registry = require('../core/service-registry');"
    echo "const { createErrorHandler } = require('../core/error-handler');"
    echo ""
    echo "// Create logger"
    echo "const logger = createLogger({ serviceName: '$SERVICE_NAME' });"
    echo ""
    echo "// Other imports..."
    echo ""
    echo "// Default port"
    echo "const DEFAULT_PORT = YOUR_SERVICE_PORT;"
    echo ""
    echo "async function start$SERVICE_NAME(options = {}) {"
    echo "  const port = options.port || DEFAULT_PORT;"
    echo "  "
    echo "  // Check if port is available"
    echo "  const isPortAvailable = await config.isPortAvailable(port);"
    echo "  if (!isPortAvailable) {"
    echo "    throw new Error(\`Port \${port} is already in use\`);"
    echo "  }"
    echo "  "
    echo "  // Create Express app or other server"
    echo "  const app = express();"
    echo "  "
    echo "  // Register service"
    echo "  const service = registry.registerService({"
    echo "    name: '$SERVICE_NAME',"
    echo "    type: registry.SERVICE_TYPES.HTTP, // or WS, or OTHER"
    echo "    port,"
    echo "    description: 'Description of the service',"
    echo "    status: registry.SERVICE_STATES.STARTING,"
    echo "  });"
    echo "  "
    echo "  // Set up routes and middleware"
    echo "  "
    echo "  // Add error handler"
    echo "  app.use(createErrorHandler({ logger }));"
    echo "  "
    echo "  // Start the server"
    echo "  return new Promise((resolve, reject) => {"
    echo "    const server = app.listen(port, () => {"
    echo "      logger.info(\`$SERVICE_NAME listening on port \${port}\`);"
    echo "      "
    echo "      // Update service status"
    echo "      registry.updateService(service.id, {"
    echo "        status: registry.SERVICE_STATES.RUNNING,"
    echo "      });"
    echo "      "
    echo "      // Return server object"
    echo "      resolve({"
    echo "        server,"
    echo "        app,"
    echo "        port,"
    echo "        serviceUrl: \`http://localhost:\${port}\`,"
    echo "        stop: async () => {"
    echo "          // Update service status"
    echo "          registry.updateService(service.id, {"
    echo "            status: registry.SERVICE_STATES.STOPPING,"
    echo "          });"
    echo "          "
    echo "          // Close HTTP server"
    echo "          return new Promise((resolve, reject) => {"
    echo "            server.close((err) => {"
    echo "              if (err) {"
    echo "                logger.error('Error closing server:', err);"
    echo "                reject(err);"
    echo "                return;"
    echo "              }"
    echo "              "
    echo "              logger.info('Server stopped');"
    echo "              "
    echo "              // Deregister service"
    echo "              registry.deregisterService(service.id);"
    echo "              "
    echo "              resolve();"
    echo "            });"
    echo "          });"
    echo "        },"
    echo "      });"
    echo "    });"
    echo "    "
    echo "    server.on('error', (error) => {"
    echo "      logger.error('Error starting server:', error);"
    echo "      reject(error);"
    echo "    });"
    echo "  });"
    echo "}"
    echo ""
    echo "// For direct execution"
    echo "if (require.main === module) {"
    echo "  // Parse command line args and start the service"
    echo "  const args = process.argv.slice(2);"
    echo "  let port = DEFAULT_PORT;"
    echo "  "
    echo "  for (let i = 0; i < args.length; i++) {"
    echo "    if (args[i] === '--port' || args[i] === '-p') {"
    echo "      port = parseInt(args[i + 1], 10);"
    echo "      if (isNaN(port)) {"
    echo "        console.error('Invalid port specified');"
    echo "        process.exit(1);"
    echo "      }"
    echo "      i++; // Skip the next argument"
    echo "    }"
    echo "  }"
    echo "  "
    echo "  start$SERVICE_NAME({ port })"
    echo "    .then(server => {"
    echo "      logger.info(\`$SERVICE_NAME started at \${server.serviceUrl}\`);"
    echo "      "
    echo "      // Handle process termination"
    echo "      const shutdown = async () => {"
    echo "        logger.info('Shutting down...');"
    echo "        try {"
    echo "          await server.stop();"
    echo "          logger.info('Server stopped');"
    echo "          process.exit(0);"
    echo "        } catch (error) {"
    echo "          logger.error('Error stopping server:', error);"
    echo "          process.exit(1);"
    echo "        }"
    echo "      };"
    echo "      "
    echo "      process.on('SIGINT', shutdown);"
    echo "      process.on('SIGTERM', shutdown);"
    echo "    })"
    echo "    .catch(error => {"
    echo "      logger.error('Failed to start server:', error);"
    echo "      process.exit(1);"
    echo "    });"
    echo "}"
    echo ""
    echo "module.exports = {"
    echo "  start$SERVICE_NAME,"
    echo "};"
    echo "```"
elif [ "$EXTENSION" == "py" ]; then
    echo "```python"
    echo "#!/usr/bin/env python3"
    echo "# $SERVICE_NAME - Migrated to use standardized core framework"
    echo ""
    echo "import os"
    echo "import sys"
    echo "import argparse"
    echo "import signal"
    echo "import asyncio"
    echo ""
    echo "# Add parent directory to path for core module imports"
    echo "sys.path.append(os.path.join(os.path.dirname(__file__), '..'))"
    echo "from core import config, logger, service_registry, error_handler"
    echo ""
    echo "# Create logger"
    echo "logger = logger.create_logger(service_name='$SERVICE_NAME')"
    echo ""
    echo "# Default port"
    echo "DEFAULT_PORT = YOUR_SERVICE_PORT"
    echo ""
    echo "async def start_service(port=DEFAULT_PORT):"
    echo "    # Check if port is available"
    echo "    if not await config.is_port_available(port):"
    echo "        raise RuntimeError(f\"Port {port} is already in use\")"
    echo "    "
    echo "    # Register service"
    echo "    service = service_registry.register_service("
    echo "        name='$SERVICE_NAME',"
    echo "        service_type=service_registry.SERVICE_TYPES.HTTP,  # or WS, or OTHER"
    echo "        port=port,"
    echo "        description='Description of the service',"
    echo "        status=service_registry.SERVICE_STATES.STARTING,"
    echo "    )"
    echo "    "
    echo "    # Set up your service..."
    echo "    "
    echo "    # Update service status"
    echo "    service_registry.update_service(service['id'], {"
    echo "        'status': service_registry.SERVICE_STATES.RUNNING,"
    echo "    })"
    echo "    "
    echo "    logger.info(f\"$SERVICE_NAME started on port {port}\")"
    echo "    "
    echo "    # Set up shutdown handler"
    echo "    def shutdown_handler(signum, frame):"
    echo "        logger.info(\"Shutting down...\")"
    echo "        # Update service status"
    echo "        service_registry.update_service(service['id'], {"
    echo "            'status': service_registry.SERVICE_STATES.STOPPING,"
    echo "        })"
    echo "        "
    echo "        # Clean up resources..."
    echo "        "
    echo "        # Deregister service"
    echo "        service_registry.deregister_service(service['id'])"
    echo "        "
    echo "        logger.info(\"Shutdown complete\")"
    echo "        sys.exit(0)"
    echo "    "
    echo "    # Register signal handlers"
    echo "    signal.signal(signal.SIGINT, shutdown_handler)"
    echo "    signal.signal(signal.SIGTERM, shutdown_handler)"
    echo "    "
    echo "    # Run the main service loop"
    echo "    try:"
    echo "        # Your service main loop"
    echo "        while True:"
    echo "            await asyncio.sleep(1)"
    echo "    except Exception as e:"
    echo "        logger.error(f\"Error in main service loop: {e}\")"
    echo "        # Update service status"
    echo "        service_registry.update_service(service['id'], {"
    echo "            'status': service_registry.SERVICE_STATES.ERROR,"
    echo "            'error': str(e),"
    echo "        })"
    echo "        raise"
    echo ""
    echo "def main():"
    echo "    # Parse command line arguments"
    echo "    parser = argparse.ArgumentParser(description='$SERVICE_NAME')"
    echo "    parser.add_argument('--port', '-p', type=int, default=DEFAULT_PORT,"
    echo "                        help=f'Port to run the service on (default: {DEFAULT_PORT})')"
    echo "    args = parser.parse_args()"
    echo "    "
    echo "    try:"
    echo "        # Start the service"
    echo "        asyncio.run(start_service(port=args.port))"
    echo "    except KeyboardInterrupt:"
    echo "        logger.info(\"Service stopped by user\")"
    echo "    except Exception as e:"
    echo "        logger.error(f\"Error starting service: {e}\")"
    echo "        sys.exit(1)"
    echo ""
    echo "if __name__ == '__main__':"
    echo "    main()"
    echo "```"
fi

echo ""
echo -e "${GREEN}Migration guide created successfully!${NC}"
echo "Your original file is backed up at: $BACKUP_FILE"
echo ""
echo "Next steps:"
echo "1. Edit $SERVICE_FILE to implement the migration"
echo "2. Test the migrated service"
echo "3. Update any services that depend on this one"
echo ""
echo -e "${BLUE}Happy coding!${NC}" 