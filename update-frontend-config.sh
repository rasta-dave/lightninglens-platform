#!/bin/bash
# update-frontend-config.sh - Updates the frontend configuration with current port values

# Terminal colors
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

echo -e "${YELLOW}Updating frontend configuration...${NC}"

# Define key paths
PROJECT_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
FRONTEND_DIR="${PROJECT_ROOT}/Lightning-Lens/lightning_lens/frontend"
CONFIG_DIR="${PROJECT_ROOT}/configs"
PUBLIC_DIR="${FRONTEND_DIR}/public"

# Ensure directories exist
mkdir -p ${CONFIG_DIR}
mkdir -p ${PUBLIC_DIR}

# Port configuration
CORS_PROXY_PORT=3003
HTTP_SERVER_PORT=8000
WEBSOCKET_SERVER_PORT=8768
SUGGESTIONS_SERVICE_PORT=8767
FRONTEND_PORT=3000
HEALTH_DASHBOARD_PORT=3030

# Create the config file
cat > ${PUBLIC_DIR}/config.js << EOF
// Lightning Lens Frontend Configuration
// Generated by update-frontend-config.sh script
window.LIGHTNING_LENS_CONFIG = {
  CORS_PROXY_PORT: ${CORS_PROXY_PORT},
  HTTP_SERVER_PORT: ${HTTP_SERVER_PORT},
  WEBSOCKET_SERVER_PORT: ${WEBSOCKET_SERVER_PORT},
  SUGGESTIONS_SERVICE_PORT: ${SUGGESTIONS_SERVICE_PORT},
  FRONTEND_PORT: ${FRONTEND_PORT},
  HEALTH_DASHBOARD_PORT: ${HEALTH_DASHBOARD_PORT},
  
  // URLs for frontend usage
  CORS_PROXY_URL: "http://localhost:${CORS_PROXY_PORT}",
  CORS_PROXY_WS: "ws://localhost:${CORS_PROXY_PORT}/ws",
  SUGGESTIONS_WS: "ws://localhost:${SUGGESTIONS_SERVICE_PORT}",
  HEALTH_DASHBOARD_URL: "http://localhost:${HEALTH_DASHBOARD_PORT}",
  
  // Environment settings
  ENVIRONMENT: "development",
  SHOW_MOCK_DATA_TOGGLE: false,
  USE_INTEGRATED_API: true,
  
  // App configuration
  REFRESH_INTERVAL: 10000,
  MAX_CONNECTION_ATTEMPTS: 10,
  
  // Feature flags
  FEATURES: {
    HEALTH_DASHBOARD: true,
    SUGGESTIONS: true,
    PREDICTIONS: true,
    NETWORK_VISUALIZATION: true
  }
};
EOF

# Create a config.json file as well for server-side use
cat > ${CONFIG_DIR}/config.json << EOF
{
  "ports": {
    "cors_proxy": ${CORS_PROXY_PORT},
    "http_server": ${HTTP_SERVER_PORT},
    "websocket_server": ${WEBSOCKET_SERVER_PORT},
    "suggestions_service": ${SUGGESTIONS_SERVICE_PORT},
    "frontend": ${FRONTEND_PORT},
    "health_dashboard": ${HEALTH_DASHBOARD_PORT}
  },
  "urls": {
    "cors_proxy": "http://localhost:${CORS_PROXY_PORT}",
    "cors_proxy_ws": "ws://localhost:${CORS_PROXY_PORT}/ws",
    "suggestions_ws": "ws://localhost:${SUGGESTIONS_SERVICE_PORT}",
    "health_dashboard": "http://localhost:${HEALTH_DASHBOARD_PORT}"
  },
  "environment": "development",
  "use_integrated_api": true
}
EOF

# Check if files were created successfully
if [ -f "${PUBLIC_DIR}/config.js" ] && [ -f "${CONFIG_DIR}/config.json" ]; then
  echo -e "${GREEN}✓ Frontend configuration updated successfully${NC}"
  echo -e "  Frontend config: ${PUBLIC_DIR}/config.js"
  echo -e "  Server config: ${CONFIG_DIR}/config.json"
else
  echo -e "${RED}✗ Failed to update frontend configuration${NC}"
  exit 1
fi

echo -e "Configuration Summary:"
echo -e "  API Gateway:          http://localhost:${CORS_PROXY_PORT}"
echo -e "  API Gateway WS:       ws://localhost:${CORS_PROXY_PORT}/ws"
echo -e "  HTTP Server:          http://localhost:${HTTP_SERVER_PORT}"
echo -e "  WebSocket Server:     ws://localhost:${WEBSOCKET_SERVER_PORT}"
echo -e "  Suggestions Service:  ws://localhost:${SUGGESTIONS_SERVICE_PORT}"
echo -e "  Health Dashboard:     http://localhost:${HEALTH_DASHBOARD_PORT}"
echo -e "  Frontend:             http://localhost:${FRONTEND_PORT}"
